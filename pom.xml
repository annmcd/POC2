<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>ie.aib.msf</groupId>
	<artifactId>demo-poc-ms2</artifactId>
	<version>1.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo-poc-ms2</name>
	<description>Demo Ms2</description>



	<properties>
	
	
	 <!--AMD start properties -->
		<maven.surefire.plugin.version>2.4.3</maven.surefire.plugin.version>

	<!--AMD Provide Sonar with the jacoco output -->
	
		<jacoco-maven-plugin.version>0.7.2.201409121644</jacoco-maven-plugin.version>
		<failsafe.version>2.15</failsafe.version>
		<findbugs.version>3.0.4</findbugs.version>
	
		<sonar.jacoco.itReportPath>${project.build.directory}/jacoco-it.exec</sonar.jacoco.itReportPath> 
		<sonar.junit.reportsPath>${project.build.directory}/surefire-reports</sonar.junit.reportsPath>
		<sonar.jacoco.jar>${basedir}/lib/jacocoagent.jar</sonar.jacoco.jar>
  		<sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
   		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
   	    <sonar.language>java</sonar.language>
	    <sonar.exclusions>src/main/resources/**</sonar.exclusions>
	    <sonar.test.exclusions>src/java/test/java/**, src/test/java/resources/**, src/test/resources/**</sonar.test.exclusions>
	    <sonar.dynamic>reuseReports</sonar.dynamic> 

		<!-- Maximum number of classes that can be missed per project -->
		<max.classes.missed>0</max.classes.missed>
		<!--Target instruction coverage -->
		<min.instruction.coverage>90.00</min.instruction.coverage>
		
		<sonar.plugin.version>2.7.1</sonar.plugin.version>
		<sonar.login>admin</sonar.login>
		<sonar.password>admin</sonar.password>
		<sonar.host.url>admin</sonar.host.url>
		<project.properties.file></project.properties.file>
		<!--AMD end property additions-->
	
	
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-boot.version>1.4.2.RELEASE</spring-boot.version>
        <maven.checkstyle.skip>true</maven.checkstyle.skip>
        <maven.findbugs.skip>true</maven.findbugs.skip>
        <maven.pmd.skip>true</maven.pmd.skip>
	</properties>

	
	
	
	<dependencies>
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.8.2</version>
    </dependency>
   </dependencies>

	<dependencyManagement>
		<dependencies>
		</dependencies>
	</dependencyManagement>
	<profiles>

	
	<!-- ideal to do this at the start of the build we now have the maven property stack -->
	<profile>
	<id>generate-properties</id>
	 <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <configuration>
              <outputFile>
                ${project.properties.file}
              </outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</profile>
	
	
	
  <profile>
   <id>read-properties</id>	
	<build>
	<plugins>
		<plugin>
		  <groupId>org.codehaus.mojo</groupId>
		  <artifactId>properties-maven-plugin</artifactId>
		  <version>1.0.0</version>
		  <executions>
			<!-- Associate the read-project-properties goal with the initialize phase, to read the properties file. -->
			<execution>
			  <!-- Apart from this test, the phase must be initialize -->
			<!--  <phase>validate</phase> -->
			   <phase>initialize</phase>
			  <goals>
				<goal>read-project-properties</goal>
			  </goals>
			  <configuration>
				<files>
				  <file>${project.build.Directory}/project.properties</file>
				</files>
			  </configuration>
			</execution>
		  </executions>
		</plugin>
		<plugin>
		  <groupId>org.apache.maven.plugins</groupId>
		  <artifactId>maven-antrun-plugin</artifactId>
		  <version>1.6</version>
		  <executions>
			<execution>
			  <phase>validate</phase>
			  <goals>
				<goal>run</goal>
			  </goals>
				  <configuration>
					<target> <!--replace with a param -->
					  <echo>Displaying value of properties</echo>
					  <echo>[sonar.plugin.version] ${sonar.plugin.version}</echo>
					</target>
				  </configuration>
			</execution>
		  </executions>
		</plugin>
  </plugins>
</build>
</profile>
	
	

	
	
	
     <profile>
		<id>unit-tests</id>
		<build>
		<plugins>
		 <plugin>
	        <artifactId>maven-surefire-plugin</artifactId>
	           <version>${maven.surefire.plugin.version}</version>
	            <executions>
	              <execution>
	                <id>default-test</id>
	                <phase>test</phase>
	                <goals>
	                  <goal>test</goal>
	                </goals>
	                <configuration>
	                <reuseForks>true</reuseForks>
	                <forkCount>1C</forkCount>
   	               <argLine>${surefireArgLine}</argLine>
	                </configuration>
	              </execution>
	            </executions>
	            <configuration>
				<!--option to generate reports only -->
		              <skipTests>${skipTests}</skipTests>
					  <!--identify the unit tests -->
		                <includes>
		                    <include>**/*Test*.java</include>
		                     <include>**/*Test.java</include>
		                </includes>
		                <excludes>
		                <exclude>**/*IT.java</exclude>
		                </excludes> 
	           	    	<argLine>${argLine} -XX:PermSize=128m -XX:MaxPermSize=512m -XX:-UseSplitVerifier -noverify</argLine> 
	           </configuration>
	          </plugin>
	    	  <plugin>
	            <groupId>org.jacoco</groupId>
	            <artifactId>jacoco-maven-plugin</artifactId>
	            <version>${jacoco-maven-plugin.version}</version>
	            <executions>
	              <!-- pre-unit-test execution helps setting up some maven property,
	                which will be used later by JaCoCo -->
	              <execution>
	                <id>pre-unit-test</id>
	                <goals>
	                  <goal>prepare-agent</goal>
	                </goals>
	                <configuration>
				    	 <append>true</append>
	                     <destFile>${project.build.directory}/jacoco-ut.exec</destFile>
			
				       	<!-- exclude here the test packages we do not want to consider for code coverage calculation-->
						  <excludes>
							<exclude>**/IT*.java</exclude>
							<exclude>**/*IT.java</exclude>
						</excludes> 
	                      <propertyName>surefireArgLine</propertyName> 
	                </configuration>
	              </execution>
				             
				  <execution>
                     <id>post-test</id>
	                <phase>test</phase>
	                <goals>
	                  <goal>check</goal>
	                  <goal>report</goal>
	                </goals>
	                <configuration>
	                  <!-- output file with report data.session.executionRootDirectory -->
	                  <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile> <!-- targets to the site folder the xml and html reports -->
	                  <!-- output directory for the site HTML and xml reports. -->
	                  <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
	                   <rules>
						  <!--  Require overall instruction coverage of minInstructionCoverage %, and don't allow any classes to be missed -->
						  <rule>
						    <element>BUNDLE</element>
						       <excludes>
						       <exclude>*IT</exclude>
						    </excludes>
						    <limits>
						      <limit>
						        <counter>INSTRUCTION</counter>
						        <value>COVEREDRATIO</value>
						        <minimum>${min.instruction.coverage}</minimum>
						      </limit>
						      <limit>
						        <counter>CLASS</counter>
						        <value>MISSEDCOUNT</value>
								<!--The max number of classes that can have no code coverage per project-->
						        <maximum>${max.classes.missed}</maximum>
						      </limit>
						    </limits>
						  </rule>
						</rules>
	               </configuration>
	              </execution>
				 </executions>
	          </plugin>
        	</plugins>
        	</build>
		</profile>
		<!--Integration Tests with % Code Coverage measurement set as param on profile, option to skip tests via, skiptTests=true, and generate reports only -->
		<profile>
		<id>integration-tests</id>
		<build>
		<plugins>
		 <plugin>
	          <artifactId>maven-failsafe-plugin</artifactId>
				<version>${failsafe.version}</version>
	            <executions>
	              <execution>
				       <id>integration-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
	                <configuration>
	                <reuseForks>true</reuseForks>
	                <forkCount>1C</forkCount>
   	                 <argLine>${failsafeArgLine}</argLine>
	                </configuration>
	              </execution>
	            </executions>
	            <configuration>
		              <skipTests>${skipTests}</skipTests>
					   <!--Identify the integration tests -->
		                <includes>
		                    <include>**/*IT.java</include>
		                </includes>
		                <excludes>
		                <exclude>**/*Tests.java</exclude>
		                </excludes> 
	           	    	<argLine>${failsafeArgLine} -XX:PermSize=128m -XX:MaxPermSize=512m -XX:-UseSplitVerifier -noverify</argLine>
	           </configuration>
	          </plugin>
	    	  <plugin>
	            <groupId>org.jacoco</groupId>
	            <artifactId>jacoco-maven-plugin</artifactId>
	            <version>${jacoco-maven-plugin.version}</version>
	            <executions>
	              <!-- pre-unit-test execution helps setting up some maven property,
	                which will be used later by JaCoCo -->
	              <execution>
	                <id>pre-integration-test</id>
	                <goals>
	                  <goal>prepare-agent</goal>
	                </goals>
	                <configuration>
				    	 <append>true</append>
	                     <destFile>${project.build.directory}/jacoco-it.exec</destFile>
	                    <propertyName>failsafeArgLine</propertyName>
	                </configuration>
	              </execution>
				             
				  <execution>
                    <id>post-integration-test</id>
	                <phase>post-integration-test</phase>
	                <goals>
					<goal>check</goal>
	                  <goal>report</goal>
	                </goals>
	                <configuration>
	                  <!-- output file with report data.session.executionRootDirectory -->
	                  <dataFile>${project.build.directory}/jacoco-it.exec</dataFile> <!-- targets to the site folder the xml and html reports -->
	                  <!-- output directory for the site HTML and xml reports. -->
	                  <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
	                   <rules>
						  <!--  Require overall instruction coverage of minInstructionCoverage %, and don't allow any classes to be missed -->
						  <rule>
						    <element>BUNDLE</element>
						     <excludes>
							 <!--exclude the unit tests-->
						     <exclude>*Test*</exclude>
						    </excludes>
						    <limits>
						      <limit>
						        <counter>INSTRUCTION</counter>
						        <value>COVEREDRATIO</value>
						        <minimum>${min.instruction.coverage}</minimum>
						      </limit>
						    </limits>
						  </rule>
						</rules>
	               </configuration>
	              </execution>
				 </executions>
	          </plugin>
        	</plugins>
       	</build>
	</profile>
	
	<profile>
    <id>find-bugs</id>
    <build>
        <plugins>
            
        </plugins>
    </build>
 </profile>
	
	</profiles>
	
	<build>
		<plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>3.0.4</version>
                <configuration>
                    <findbugsXmlOutput>true</findbugsXmlOutput>
                    <xmlOutput>true</xmlOutput>
                    <failOnError>false</failOnError>
                    <failOnViolation>false</failOnViolation>
                    <skip>${maven.findbugs.skip}</skip>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.6</version>
                <configuration>
                    <linkXref>true</linkXref>
                    <sourceEncoding>utf-8</sourceEncoding>
                    <minimumTokens>100</minimumTokens>
                    <failOnViolation>false</failOnViolation>
                    <consoleOutput>false</consoleOutput>
                    <skip>${maven.pmd.skip}</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>2.17</version>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>6.19</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <skip>${maven.checkstyle.skip}</skip>
                    <logViolationsToConsole>false</logViolationsToConsole>
                    <configLocation>${user.dir}/google_checks.xml</configLocation>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>false</consoleOutput>
                    <failsOnError>false</failsOnError>
                    <failOnViolation>false</failOnViolation>
                    <linkXRef>false</linkXRef>
                </configuration>
            </plugin>
			
		</plugins>
	</build>


</project>